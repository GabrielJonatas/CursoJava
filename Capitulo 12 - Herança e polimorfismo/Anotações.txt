Herança

É um tipo de associação que permite que uma classe herde todos dados e comportamentos de outras

Definições importantes

Vantagens

- Reuso 
- Polimorfismo

Sintaxe

- class A extends B

Relação "é-um"

Generalização/especialização

Superclasse (classe beta)/subclasse (classe derivada)

Herança/extensão

Herança é uma associação entre classes (e não entre objetos)





Upcasting downcasting

Upcasting

- casting da subclasse para superclasse
- Uso comum: polimorfismo

Downcasting

- casting da superclasse para subclasse
- palavra instanceof
- uso comum: métodos que recebem parâmetros genéricos (ex: Equals)




Sobreposição ou sobrescrita

é a implementação de um método de uma superclasse na subclasse

é fortemente recomendável usar a anotação @Override em um método sobrescrito
- facilita a leitura e compreensão do código
- avisamos ao compilador (boa prática)





Palavra super

é possível chamar a implementação da superclasse usando a palavra super






Classes e métodos final

palavra chave: final

Classe: evita que a classe seja herdada

public final class SavingsAccount {

Método: evita que o método sob seja sobreposto






Introdução ao polimorfismo

Em programação orientada a objetos, polimorfismo é um recurso que permite que variáveis de um mesmo tipo mais genérico possam apontar para objetos de tipos específicos diferentes, tendo assim comportamentos diferentes conforme cada tipo específico

Account x = new Account(1020, "Alex");
Account y = new SavingsAccount(1023, "Maria", 0.01);

x.withdraw(50.0);
y.withdraw(50.0);

Importante entender

A associação do tipo especifico com o tipo genérico é feita em tempo de execução (upcasting)

O compilador não sabe para qual tipo especifico a chamada do método Withdraw está sendo feita (ele só sabe que são duas variáveis tipo Account):




Classes abstratas

São classes que não podem ser instanciadas

É uma forma de garantir herança total: somente subclasses não abstratas podem ser instanciadas, mas nunca a superclasse abstrata


Métodos abstratos

São métodos que não possuem implementação

Métodos precisam ser abstratos quando a classe é genérica demais para conter sua implementação

Se uma classe possuir pelo menos um método abstrato, então esta classe também é abstrata

Notação UML: itálico
